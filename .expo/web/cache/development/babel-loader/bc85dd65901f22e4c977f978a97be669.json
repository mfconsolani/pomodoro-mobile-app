{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/mauro/Programacion/ReactNative/pomodoro-mobile-app/src/components/Countdown.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { stylePatterns } from \"../utils/stylesPatterns\";\n\nvar minutesToMillis = function minutesToMillis(min) {\n  return min * 1000 * 60;\n};\n\nvar formatTime = function formatTime(time) {\n  return time < 10 ? \"0\" + time : time;\n};\n\nexport var Countdown = function Countdown(_ref) {\n  var _ref$minutes = _ref.minutes,\n      minutes = _ref$minutes === void 0 ? 2 : _ref$minutes,\n      isPaused = _ref.isPaused,\n      onProgress = _ref.onProgress;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      millis = _useState2[0],\n      setMillis = _useState2[1];\n\n  var interval = React.useRef(null);\n  var minute = Math.floor(millis / 1000 / 60) % 60;\n  var seconds = Math.floor(millis / 1000) % 60;\n\n  var countDown = function countDown() {\n    setMillis(function (time) {\n      if (time === 0) {\n        return time;\n      }\n\n      var timeLeft = time - 1000;\n      return timeLeft;\n    });\n  };\n\n  useEffect(function () {\n    setMillis(minutesToMillis(minutes));\n  }, [minutes]);\n  useEffect(function () {\n    if (isPaused) {\n      if (interval.current) clearInterval(interval.current);\n      return;\n    }\n\n    interval.current = setInterval(countDown, 1000);\n    onProgress(millis / minutesToMillis(minutes));\n    return function () {\n      return clearInterval(interval.current);\n    };\n  }, [isPaused, millis]);\n  return React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, formatTime(minute), \":\", formatTime(seconds));\n};\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: stylePatterns.fontSizes.xxxl,\n    fontWeight: \"bold\",\n    color: stylePatterns.color.white,\n    padding: stylePatterns.paddingSizes.lg,\n    backgroundColor: 'rgba(94, 132, 226, 0.3)'\n  }\n});","map":{"version":3,"sources":["/home/mauro/Programacion/ReactNative/pomodoro-mobile-app/src/components/Countdown.js"],"names":["React","useState","useEffect","stylePatterns","minutesToMillis","min","formatTime","time","Countdown","minutes","isPaused","onProgress","millis","setMillis","interval","useRef","minute","Math","floor","seconds","countDown","timeLeft","current","clearInterval","setInterval","styles","text","StyleSheet","create","fontSize","fontSizes","xxxl","fontWeight","color","white","padding","paddingSizes","lg","backgroundColor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,aAAT;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD;AAAA,SAASA,GAAG,GAAG,IAAN,GAAa,EAAtB;AAAA,CAAxB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAUA,IAAI,GAAG,EAAP,SAAgBA,IAAhB,GAAyBA,IAAnC;AAAA,CAAnB;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAInB;AAAA,0BAHJC,OAGI;AAAA,MAHJA,OAGI,6BAHM,CAGN;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,UACI,QADJA,UACI;;AACJ,kBAA4BV,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOW,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,QAAQ,GAAGd,KAAK,CAACe,MAAN,CAAa,IAAb,CAAjB;AACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAG,IAAT,GAAgB,EAA3B,IAAiC,EAAhD;AACA,MAAMO,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAG,IAApB,IAA4B,EAA5C;;AAEA,MAAMQ,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBP,IAAAA,SAAS,CAAC,UAAAN,IAAI,EAAI;AAChB,UAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,eAAOA,IAAP;AACD;;AACD,UAAMc,QAAQ,GAAGd,IAAI,GAAG,IAAxB;AACA,aAAOc,QAAP;AACD,KANQ,CAAT;AAOD,GARD;;AAUAnB,EAAAA,SAAS,CAAC,YAAK;AACbW,IAAAA,SAAS,CAACT,eAAe,CAACK,OAAD,CAAhB,CAAT;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,QAAJ,EAAa;AACX,UAAGI,QAAQ,CAACQ,OAAZ,EAAqBC,aAAa,CAACT,QAAQ,CAACQ,OAAV,CAAb;AACrB;AACD;;AACDR,IAAAA,QAAQ,CAACQ,OAAT,GAAmBE,WAAW,CAACJ,SAAD,EAAY,IAAZ,CAA9B;AACAT,IAAAA,UAAU,CAACC,MAAM,GAACR,eAAe,CAACK,OAAD,CAAvB,CAAV;AAEA,WAAO;AAAA,aAAMc,aAAa,CAACT,QAAQ,CAACQ,OAAV,CAAnB;AAAA,KAAP;AACD,GATQ,EASN,CAACZ,QAAD,EAAWE,MAAX,CATM,CAAT;AAYA,SAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BpB,UAAU,CAACU,MAAD,CAArC,OAAgDV,UAAU,CAACa,OAAD,CAA1D,CAFF;AAKD,CAzCM;AA2CP,IAAMM,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,IAAI,EAAE;AACJG,IAAAA,QAAQ,EAAE1B,aAAa,CAAC2B,SAAd,CAAwBC,IAD9B;AAEJC,IAAAA,UAAU,EAAE,MAFR;AAGJC,IAAAA,KAAK,EAAE9B,aAAa,CAAC8B,KAAd,CAAoBC,KAHvB;AAIJC,IAAAA,OAAO,EAAEhC,aAAa,CAACiC,YAAd,CAA2BC,EAJhC;AAKJC,IAAAA,eAAe,EAAE;AALb;AADyB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text } from 'react-native';\nimport { stylePatterns } from '../utils/stylesPatterns';\n\nconst minutesToMillis = (min) => min * 1000 * 60;\nconst formatTime = (time) => time < 10 ? `0${time}` : time;\n\nexport const Countdown = ({\n  minutes = 2,\n  isPaused,\n  onProgress\n}) => {\n  const [millis, setMillis] = useState(null);\n  const interval = React.useRef(null);\n  const minute = Math.floor(millis / 1000 / 60) % 60;\n  const seconds = Math.floor(millis / 1000) % 60;\n  \n  const countDown = () => {\n    setMillis(time => {\n      if (time === 0) {\n        return time;\n      }\n      const timeLeft = time - 1000;\n      return timeLeft;\n    });\n  };\n\n  useEffect(()=> {\n    setMillis(minutesToMillis(minutes));\n  }, [minutes]);\n\n  useEffect(() => {\n    if (isPaused){\n      if(interval.current) clearInterval(interval.current);\n      return;\n    }\n    interval.current = setInterval(countDown, 1000);\n    onProgress(millis/minutesToMillis(minutes));\n\n    return () => clearInterval(interval.current);\n  }, [isPaused, millis]);\n\n\n  return (\n    // <View style={styles.container}>\n    <Text style={styles.text}>{formatTime(minute)}:{formatTime(seconds)}</Text>\n    // </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: stylePatterns.fontSizes.xxxl,\n    fontWeight: \"bold\",\n    color: stylePatterns.color.white,\n    padding: stylePatterns.paddingSizes.lg,\n    backgroundColor: 'rgba(94, 132, 226, 0.3)'\n  },\n});"]},"metadata":{},"sourceType":"module"}