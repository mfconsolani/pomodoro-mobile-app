{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/mauro/Programacion/ReactNative/pomodoro-mobile-app/src/features/timer/Timer.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ProgressBar } from 'react-native-paper';\nimport { stylePatterns } from \"../../utils/stylesPatterns\";\nimport { Countdown } from \"../../components/Countdown\";\nimport { RoundedButton } from \"../../components/RoundedButton\";\nimport { Timing } from \"../timer/Timing\";\nimport { useKeepAwake } from 'expo-keep-awake';\nexport var Timer = function Timer(_ref) {\n  var focusSubject = _ref.focusSubject,\n      onTimerEnd = _ref.onTimerEnd,\n      clearSubject = _ref.clearSubject;\n  useKeepAwake();\n\n  var _useState = useState(0.1),\n      _useState2 = _slicedToArray(_useState, 2),\n      minutes = _useState2[0],\n      setMinutes = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isStarted = _useState4[0],\n      setIsStarted = _useState4[1];\n\n  var _useState5 = useState(1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      progress = _useState6[0],\n      setProgress = _useState6[1];\n\n  var onProgress = function onProgress(progress) {\n    setProgress(progress);\n  };\n\n  var vibrate = function vibrate() {\n    if (Platform.OS === \"ios\") {\n      var interval = setInterval(function () {\n        return Vibration.vibrate();\n      }, 1000);\n      setTimeout(function () {\n        return clearInterval(interval);\n      }, 10000);\n    } else {\n      Vibration.vibrate(3 * 1000);\n    }\n  };\n\n  var changeTime = function changeTime(min) {\n    setMinutes(min);\n    setProgress(1);\n    setIsStarted(false);\n  };\n\n  var onEnd = function onEnd() {\n    vibrate();\n    setMinutes(1);\n    setProgress(1);\n    setIsStarted(false);\n    onTimerEnd();\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.countdown,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Countdown, {\n    minutes: minutes,\n    isPaused: !isStarted,\n    onProgress: onProgress,\n    onEnd: onEnd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: {\n      paddingTop: stylePatterns.paddingSizes.xxl\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"We are focusing on\"), React.createElement(Text, {\n    style: styles.task,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, focusSubject)), React.createElement(View, {\n    style: styles.progressBarContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, React.createElement(ProgressBar, {\n    style: styles.progressBar,\n    progress: progress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.buttonWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, React.createElement(Timing, {\n    onChangeTime: changeTime,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.buttonWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, React.createElement(RoundedButton, {\n    title: isStarted ? 'pause' : 'start',\n    onPress: function onPress() {\n      return setIsStarted(!isStarted);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.clearSubject,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, React.createElement(RoundedButton, {\n    title: \"-\",\n    size: 50,\n    onPress: function onPress() {\n      return clearSubject();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  title: {\n    color: stylePatterns.color.white,\n    textAlign: \"center\"\n  },\n  task: {\n    fontWeight: 'bold',\n    textAlign: \"center\",\n    color: stylePatterns.color.white\n  },\n  countdown: {\n    flex: 0.5,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonWrapper: {\n    flex: 0.3,\n    flexDirection: \"row\",\n    padding: stylePatterns.paddingSizes.xxl,\n    justifyContent: \"space-around\",\n    alignItems: \"center\"\n  },\n  progressBar: {\n    height: 10,\n    color: \"#5E84E2\"\n  },\n  progressBarContainer: {\n    paddingTop: stylePatterns.paddingSizes.sm\n  },\n  clearSubject: {\n    paddingBottom: 25,\n    paddingLeft: 15\n  }\n});","map":{"version":3,"sources":["/home/mauro/Programacion/ReactNative/pomodoro-mobile-app/src/features/timer/Timer.js"],"names":["React","useState","ProgressBar","stylePatterns","Countdown","RoundedButton","Timing","useKeepAwake","Timer","focusSubject","onTimerEnd","clearSubject","minutes","setMinutes","isStarted","setIsStarted","progress","setProgress","onProgress","vibrate","Platform","OS","interval","setInterval","Vibration","setTimeout","clearInterval","changeTime","min","onEnd","styles","container","countdown","paddingTop","paddingSizes","xxl","title","task","progressBarContainer","progressBar","buttonWrapper","StyleSheet","create","flex","color","white","textAlign","fontWeight","alignItems","justifyContent","flexDirection","padding","height","sm","paddingBottom","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, Text, Vibration, Platform } from 'react-native';\nimport { ProgressBar } from 'react-native-paper';\nimport { stylePatterns } from '../../utils/stylesPatterns';\nimport { Countdown } from '../../components/Countdown';\nimport { RoundedButton } from '../../components/RoundedButton';\nimport { Timing } from '../timer/Timing';\nimport { useKeepAwake } from 'expo-keep-awake';\n\nexport const Timer = ({ focusSubject, onTimerEnd, clearSubject }) => {\n  useKeepAwake();\n  const [minutes, setMinutes] = useState(0.1);\n  const [isStarted, setIsStarted] = useState(false);\n  const [progress, setProgress] = useState(1);\n\n  const onProgress = progress => {\n    setProgress(progress);\n  };\n\n  const vibrate = () => {\n    if (Platform.OS === \"ios\"){\n      const interval = setInterval(() => Vibration.vibrate(), 1000);\n      setTimeout(()=> clearInterval(interval), 10000);\n    } else {\n      Vibration.vibrate(3*1000);\n    } \n  };\n\n  const changeTime = (min) => {\n    setMinutes(min);\n    setProgress(1);\n    setIsStarted(false);\n  };\n\n  const onEnd = () => {\n    vibrate();\n    setMinutes(1);\n    setProgress(1);\n    setIsStarted(false);\n    onTimerEnd();\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.countdown}>\n        <Countdown \n        minutes={minutes} \n        isPaused={!isStarted} \n        onProgress={onProgress}\n        onEnd={onEnd}\n         />\n      </View>\n      <View style={{ paddingTop: stylePatterns.paddingSizes.xxl }}>\n        <Text style={styles.title}>We are focusing on</Text>\n        <Text style={styles.task}>{focusSubject}</Text>\n      </View>\n      <View style={styles.progressBarContainer}>\n        <ProgressBar style={styles.progressBar} progress={progress} />\n      </View>\n      <View style={styles.buttonWrapper}>\n        <Timing onChangeTime={changeTime}/>\n      </View>\n      <View style={styles.buttonWrapper}>\n        <RoundedButton\n          title={isStarted ? 'pause' : 'start'}\n          onPress={() => setIsStarted(!isStarted)} />\n      </View>\n        <View style={styles.clearSubject}>\n          <RoundedButton \n          title=\"-\" \n          size={50} \n          onPress={()=> clearSubject()} />\n        </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    color: stylePatterns.color.white,\n    textAlign: \"center\"\n  },\n  task: {\n    fontWeight: 'bold',\n    textAlign: \"center\",\n    color: stylePatterns.color.white\n  },\n  countdown: {\n    flex: 0.5,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonWrapper: {\n    flex: 0.3,\n    flexDirection: \"row\",\n    padding: stylePatterns.paddingSizes.xxl,\n    justifyContent: \"space-around\",\n    alignItems: \"center\"\n  },\n  progressBar: {\n    height: 10,\n    color:\"#5E84E2\"\n  },\n  progressBarContainer: {\n    paddingTop: stylePatterns.paddingSizes.sm,\n  },\n  clearSubject:{\n    paddingBottom: 25,\n    paddingLeft: 15\n  }\n});"]},"metadata":{},"sourceType":"module"}